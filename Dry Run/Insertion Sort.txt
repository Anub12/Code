// Selection Sort
void selectionSort(int arr[], int n){
	int i, key, j;
	for(i = 1; i < n; i++){
		key = arr[i];
		j=i-1;
		while(j >= 0 && arr[j] > key){
			arr[j+1] = arr[j]
			j = j-1;
		}
		arr[j+1] = key;
	}
}

index-> { 0, 1, 2,3,4, 5, 6}
arr[] = {38,27,43,3,9,82,10}
------------------------------------------------
i=1, 1 < 7 => True
key = arr[1] = 27
j=0
(0>=0 && arr[0]>key) => 38 > 27 => True
arr[1] = arr[0] => arr[1] = 38
index-> { 0, 1, 2,3,4, 5, 6}
arr[] = {38,38,43,3,9,82,10}
j=-1
-1>=0 && arr[j] > key => False (One Condition False)
arr[j+1] = key => arr[0] = key = 27
index-> { 0, 1, 2,3,4, 5, 6}
arr[] = {27,38,43,3,9,82,10}
---------------------------------------
i=2, 2 < 7 => True
key = arr[2] = 43
j=1
(1>=0 && arr[1]>key) => 38 > 43 => False
index-> { 0, 1, 2,3,4, 5, 6}
arr[] = {27,38,43,3,9,82,10}
arr[j+1] = key => arr[2] = key = 43
index-> { 0, 1, 2,3,4, 5, 6}
arr[] = {27,38,43,3,9,82,10}
---------------------------------------
i=3, 3 < 7 => True
key = arr[3] = 3
j=2
(2>=0 && arr[2]>key) => 43 > 3 => True
arr[3] = arr[2] => arr[3] = 43
index-> { 0, 1, 2, 3,4, 5, 6}
arr[] = {27,38,43,43,9,82,10}
j=1
(1>=0 && arr[1] > 3) => 38 > 3 => True
arr[2] = arr[1] => arr[2] = 38
index-> { 0, 1, 2, 3,4, 5, 6}
arr[] = {27,38,38,43,9,82,10}
j=0
(0>=0 && arr[0] > 3) => 27 > 3 => True
arr[1] = arr[0] => arr[1] = 27
index-> { 0, 1, 2, 3,4, 5, 6}
arr[] = {27,27,38,43,9,82,10}
j=-1
(-1>=0 && arr[j] > key) => False
arr[j+1] = arr[0] = key = 3
index-> {0, 1, 2, 3,4, 5, 6}
arr[] = {3,27,38,43,9,82,10}
-------------------------------------------------
i=4, 4 < 7 => True
key = arr[4] = 82
j=3
(3>=0 && arr[2] > 82) => (3>=0 && 38 > 82) => False
arr[4] = 82
index-> {0, 1, 2, 3, 4, 5, 6}
arr[] = {3,27,38,43,82,82,10}
---------------------------------------
i=5, 5 < 7 => True
key = arr[5] = 82
j=4
(4>=0 && arr[4]>82) => (4>=0 && 82 > 82) = False
arr[6] = 82
index-> {0, 1, 2, 3, 4, 5, 6}
arr[] = {3,27,38,43,82,82,82}
